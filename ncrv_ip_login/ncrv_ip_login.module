<?php

/**
 * @file
 * Provides a functionality to ban user for login if his IP was blocked..
 */


/**
 * Implementation of hook_form_alter().
 */
function ncrv_ip_login_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login') {
    array_unshift($form['#validate'], '_ncrv_ip_login_login_validate');
  }
}


/**
 * Validate login form
 *
 */
function _ncrv_ip_login_login_validate($form, $form_state) {
  // Query the table with banned IPs.
  $ip = ip_address();
  $result = db_select('ncrv_ip_login', 'c')
     ->fields('c', array('iid', 'ip'))
     ->execute()
     ->fetchAllAssoc('iid');
  
  // Check if current user is banned.
  foreach ($result as $key => $value) {
    if ($ip == $value->ip) {
      form_set_error('name', t('Sorry, you are banned.'));
      break;
    }
  }
}


/**
 * Implements hook_menu().
 */
function ncrv_ip_login_menu() {
  $items = array();
  
  $items['admin/config/services/ncrv-ip-login'] = array(
    'title' => 'NCRV IP Login',
    'description' => 'Configure NCRV IP login settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncrv_ip_login_callback'),
    'access arguments' => array('manage ip addresses'),
  );
  
  // Create a tab for a node's display with Ogex settings.
  $items['admin/config/services/ncrv-ip-login/delete/%'] = array(
    'title' => 'NCRV IP Login Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ncrv_ip_login_callback_delete', 5),
    'access callback' => TRUE,
    'access arguments' => array('manage ip addresses'),
  );

  return $items;
}


/**
 * Form callback. Provide table with added languages.
 *
 */
function ncrv_ip_logins_form() {
  $rows = array();
  $header = array(t('Blocked IP Addresses'), t('Operations'));
  $result = db_query('SELECT * FROM {ncrv_ip_login}');
  foreach ($result as $value) {
    $rows[] = array(
      $value->ip,
      l(t('delete'), "admin/config/services/ncrv-ip-login/delete/$value->ip"),
    );
  }

  $build['ncrv_ip_login_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No IP was blocked.'),
  );

  return $build;
}

/**
 * Menu callback.
 *
 */
function ncrv_ip_login_callback() {
   $form = array();
  
   $form['ip'] = array(
    '#title' => t('IP address'),
    '#type' => 'textfield',
    '#size' => 48,
    '#maxlength' => 40,
    '#default_value' => $default_ip,
    '#description' => t('Enter a valid IP address.'),
   );
   
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
   );
   $form['#token'] = FALSE;
   $form['#submit'][] = 'ncrv_ip_login_form_submit';
   $form['#validate'][] = 'ncrv_ip_login_form_validate';
   $form['ncrv_ip_logins_form'] = drupal_get_form('ncrv_ip_logins_form');
   
   return $form;
}


function ncrv_ip_login_form_validate($form, &$form_state) {
  $ip = trim($form_state['values']['ip']);
  if (db_query("SELECT * FROM {ncrv_ip_login} WHERE ip = :ip", array(':ip' => $ip))->fetchField()) {
    form_set_error('ip', t('This IP address is already blocked.'));
  }
  elseif ($ip == ip_address()) {
    form_set_error('ip', t('You may not block your own IP address.'));
  }
  elseif (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE) == FALSE) {
    form_set_error('ip', t('Enter a valid IP address.'));
  }
}

function ncrv_ip_login_form_submit($form, &$form_state) {
  $ip = trim($form_state['values']['ip']);
  db_insert('ncrv_ip_login')
    ->fields(array('ip' => $ip))
    ->execute();
  drupal_set_message(t('The IP address %ip has been blocked.', array('%ip' => $ip)));
  $form_state['redirect'] = 'admin/config/services/ncrv-ip-login';
  return;
}


/**
 * Language deletion confirm page.
 *
 * @see system_ip_blocking_delete_submit()
 */
function ncrv_ip_login_callback_delete($form, &$form_state, $ip) {
  $form['blocked_ip'] = array(
    '#type' => 'value',
    '#value' => $ip,
  );
  return confirm_form($form, t('Are you sure you want to delete %ip address?', array('%ip' => $ip)), 'admin/config/services/ncrv_ip_login', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

/**
 * Process system_ip_blocking_delete form submissions.
 */
function ncrv_ip_login_callback_delete_submit($form, &$form_state) {
  $blocked_ip = $form_state['values']['blocked_ip'];
  db_delete('ncrv_ip_login')
    ->condition('ip', $blocked_ip)
    ->execute();
  watchdog('user', 'Deleted %ip', array('%ip' => $blocked_ip));
  drupal_set_message(t('The IP address %ip was deleted.', array('%ip' => $blocked_ip)));
  $form_state['redirect'] = 'admin/config/services/ncrv-ip-login';
}


/**
 * Clear sessions table for blocked users to force their logout.
 *
 */
function _ncrv_ip_login_clear_banned_sessions() {
  $banned = array();
  // Get all banned IPs.
  $result = db_select('ncrv_ip_login', 'c')
     ->fields('c', array('iid', 'ip'))
     ->execute()
     ->fetchAllAssoc('iid');
  
  if (isset($result) && !empty($result)) {
    foreach ($result as $key => $value) {
      $ip = ip2long($value->ip);
      // Find users who were tracked using this IP.
      $users = _ncrv_ip_login_find_users($ip);
      
      if (!empty($users)) {
        // Clear session table for every found user.
        foreach ($users as $user) {
          _ncrv_ip_login_remove_session($user->uid);
        } 
      }  
    }
  }  
}

/**
 * Helper function to get users IDs for a given IP address that was tracked for
 * them.
 */

function _ncrv_ip_login_find_users($ip = '') {
  $result = array();
  // Check IP tracker table to get ID of the user.
  $result = db_select('ip_tracker', 'c')
     ->fields('c', array('uid'))
     ->condition('ip', $ip)      
     ->execute()
     ->fetchAllAssoc('uid');
 
  return $result;
}


/**
 * Helper function to remove session for given user.
 */

function _ncrv_ip_login_remove_session($uid = '') {
  // Remove session for given user
  db_delete('sessions')
    ->condition('uid', $uid)
    ->execute();
  watchdog('user', 'Cleared session for user %uid', array('%uid' => $uid));
}


/**
 * Implements hook_cron().
 */
function ncrv_ip_login_cron() {
  _ncrv_ip_login_clear_banned_sessions();
}